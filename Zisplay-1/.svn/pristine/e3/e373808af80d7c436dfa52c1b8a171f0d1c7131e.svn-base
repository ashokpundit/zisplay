package vun.zisplaymerchant.activity;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.provider.MediaStore;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.aviary.android.feather.sdk.AviaryIntent;
import com.aviary.android.feather.sdk.internal.Constants;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedString;
import vun.zisplaymerchant.R;
import vun.zisplaymerchant.managers.AnalyticsManager;
import vun.zisplaymerchant.managers.LocalData;
import vun.zisplaymerchant.models.Product;
import vun.zisplaymerchant.models.ZisplayImage;
import vun.zisplaymerchant.network.OMGServices;
import vun.zisplaymerchant.network.RestClient;
import vun.zisplaymerchant.utils.AppConstants;
import vun.zisplaymerchant.utils.ImageDownloader;

public class NewProductActivity extends ZisplayBaseActivity {
    final OMGServices omgService=RestClient.getInstance().getApiService();
    String productId=null;
    final static int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 1;
    final static int AVIARY_CROP=3;
    final int PIC_CROP = 2;
    ArrayList imagePaths=new ArrayList<String[]>();
    int imageCount=0;
    boolean isImageUploadPending=false;
    static String Path=null;
    Uri imageUri = null;
    Uri imageUri2=null;
    public  static ImageView showImg  = null;
    NewProductActivity CameraActivity = null;
    LinearLayout imageRowLayout;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_new_product);
        analytics(this.getClass().getName());
        CameraActivity = this;
        Intent aviarIntent = AviaryIntent.createCdsInitIntent(getBaseContext());
        startService(aviarIntent);
//        Button photoButton=(Button)findViewById(R.id.photo);
        final Button photo = (Button) findViewById(R.id.photo);
        photo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startCamera(v);
            }});
//        .callOnClick()startCamera(););
        //layout for image row
        imageRowLayout = (LinearLayout) findViewById(R.id._imagesrow);
        showImg = (ImageView) findViewById(R.id.showImg);
        Intent intent =getIntent();
        productId = intent.getStringExtra("productId");
        if(productId!=null) {
        loadProduct(productId);
        }
    }

    private void loadProduct(String productId)
    {
        omgService.getProduct(productId, new Callback<Product>() {
            @Override
            public void success(Product productResponse, Response response) {
                if (productResponse != null) {
                    loadProduct(productResponse);
                }
            }
            @Override
            public void failure(RetrofitError error) {
                System.out.println("error " + error.getMessage());
            }
        });
//        loadProduct(productId);
    }
    private void loadProduct(Product product)
    {
        final EditText productTitleText = (EditText) findViewById(R.id.productTitle);
        final EditText productDescriptionText = (EditText) findViewById(R.id.productDescription);
        final EditText productPriceText = (EditText) findViewById(R.id.productPrice);
        final EditText productCollectionText = (EditText) findViewById(R.id.productCollection);
        productTitleText.setText(product.getTitle());
        productDescriptionText.setText(product.getDescription());
        productCollectionText.setText(product.getCatagoryId());
        productPriceText.setText(product.getPrice()+"");
        String[] imageIds=product.getImages();
        if(imageIds!=null) {
            for (int i = 0; i < imageIds.length; i++) {
                ImageDownloader imgDownloader = new ImageDownloader();
                View cell = getLayoutInflater().inflate(R.layout.imagethumb, null);
                final ImageView imageView = (ImageView) cell.findViewById(R.id._image);
                System.out.println(AppConstants.CLOUDINARY_URL + "w_100,h_100/" + imageIds[i] + ".jpg");
                String imagePath= AppConstants.CLOUDINARY_URL+"w_100,h_100/"+imageIds[i]+".jpg";
                imgDownloader.download(imagePath, imageView);
                imagePaths.add(imageIds[i]);
                imageRowLayout.addView(cell);
            }
        }

    }
    public void startCamera(View v)
    {


        HashMap event=new HashMap<String,String>();
        event.put("screenName","Product");
        event.put("label","Product Image");
        event.put("action","Camera");
        event.put("Category","Product Update");
        AnalyticsManager.getInstance().sendEvent(event);

        if(imagePaths.size()>=5)
        {
            Toast.makeText(NewProductActivity.this, "This product already have 5 images.", Toast.LENGTH_SHORT).show();
            return;
        }
        else if(isImageUploadPending)
        {
            Toast.makeText(NewProductActivity.this, "Please save product first.", Toast.LENGTH_SHORT).show();
            return;
        }
        Random r = new Random();
        int i1 = (r.nextInt(10000));
        String fileName = i1+"-"+"product-image.jpg";
        String fileName2 = i1+"-"+"product-image-2.jpg";
        ContentValues values = new ContentValues();
        values.put(MediaStore.Images.Media.TITLE, fileName);
        values.put(MediaStore.Images.Media.DESCRIPTION,"Product image");
        ContentValues values2 = new ContentValues();
        values2.put(MediaStore.Images.Media.TITLE, fileName2);
        values2.put(MediaStore.Images.Media.DESCRIPTION,"Product image");
        imageUri = getContentResolver().insert(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
        imageUri2 = getContentResolver().insert(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values2);
        Intent intent = new Intent( MediaStore.ACTION_IMAGE_CAPTURE );
        if (intent.resolveActivity(getPackageManager()) != null) {
            intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
            intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 1);
            startActivityForResult(intent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);
        }
    }

    public void submitProduct(View v) {
        HashMap event=new HashMap<String,String>();
        event.put("screenName","Product");
        event.put("label","Product");
        event.put("action","click");
        event.put("Category","Create Product");


        final EditText productTitleText = (EditText) findViewById(R.id.productTitle);
        final EditText productDescriptionText = (EditText) findViewById(R.id.productDescription);
        final EditText productPriceText = (EditText) findViewById(R.id.productPrice);
        final EditText productCollectionText = (EditText) findViewById(R.id.productCollection);
        LocalData localDataObj=LocalData.getInstance();
        HashMap productMap=new HashMap<String,String>();
        if(productId!=null) {
            productMap.put("id", productId);
            event.put("Category","Update Product");
            event.put("Product Id",productId);
        }
        AnalyticsManager.getInstance().sendEvent(event);
        productMap.put("title", productTitleText.getText().toString());
        productMap.put("description",productDescriptionText.getText().toString());
        productMap.put("price",productPriceText.getText().toString());
        productMap.put("catagoryId","54bf725b94157ceb3fec53b9");
        productMap.put("merchantId",localDataObj.getData("merchantId"));
        omgService.createProduct(productMap, new Callback<Product>() {
            @Override
            public void success(Product productResponse, Response response) {
                if (productResponse != null) {
                    productId=productResponse.getId();
                    if(isImageUploadPending) {
                        uploadImage();
                    }
                }
            }
            @Override
            public void failure(RetrofitError error) {
                System.out.println("error " + error.getMessage());
            }
        });

    }

private void uploadImage( )
{
    System.out.println("in upload image "+imageUri2.toString());
    final TypedFile imageFile=new TypedFile("image/jpg",new File(imageUri2.toString()));
    omgService.uploadImage(new TypedString("false"),new TypedString("product"), new TypedString(productId),imageFile, new Callback<ZisplayImage>() {
        @Override
        public void success(ZisplayImage zisplayImage, Response response) {
            Toast.makeText(NewProductActivity.this, "Picture uploaded ", Toast.LENGTH_SHORT).show();
            System.out.println("image created " );
            imagePaths.add(zisplayImage.getId());
            imageUri=null;
            imageUri2=null;
            Path=null;
            isImageUploadPending=false;
        }
        @Override
        public void failure(RetrofitError error) {
            Toast.makeText(NewProductActivity.this, "Picture not uploaded ", Toast.LENGTH_SHORT).show();
            System.out.println("error " + error.getMessage());
            isImageUploadPending=true;

        }
    });
}

    private void performCrop(Uri picUri) {
        Intent newIntent = new AviaryIntent.Builder(this)
                .setData(picUri) // input image src
                .build();
        startActivityForResult(newIntent, AVIARY_CROP);
        return;
    }

    @Override
    protected void onActivityResult( int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        if ( requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) {
            if ( resultCode == RESULT_OK) {
                performCrop(imageUri);
            } else if ( resultCode == RESULT_CANCELED) {
                Toast.makeText(this, " Picture was not taken ", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, " Picture was not taken ", Toast.LENGTH_SHORT).show();
            }
        }
        if (requestCode == AVIARY_CROP) {
            if (resultCode == RESULT_OK) {
                Uri mImageUri = data.getData(); // generated output file
                Bundle extra = data.getExtras();
                if (null != extra) {
                    // image has been changed?
                    boolean changed = extra.getBoolean(Constants.EXTRA_OUT_BITMAP_CHANGED);
                }
                imageUri2=mImageUri;
                new LoadImagesFromSDCard().execute(mImageUri.toString());
            }
        }
        if (requestCode == PIC_CROP) {
            if (data != null) {
                // get the returned data
                Bundle extras = data.getExtras();
                // get the cropped bitmap
                    String imageId = convertImageUriToFile( imageUri,NewProductActivity.this);
                new LoadImagesFromSDCard().execute(""+imageId);
//                Bitmap selectedBitmap = extras.getParcelable("data");
//                showImg.setImageBitmap(selectedBitmap);
            }
        }
    }
    public static String convertImageUriToFile ( Uri imageUri, Activity activity )
    {
        Cursor cursor = null;
        int imageID = 0;
        try {
            String [] proj={
                    MediaStore.Images.Media.DATA,
                    MediaStore.Images.Media._ID,
                    MediaStore.Images.Thumbnails._ID,
                    MediaStore.Images.ImageColumns.ORIENTATION
            };
            cursor = activity.getContentResolver().query(imageUri,proj,null,null,null);
            int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID);
            int columnIndexThumb = cursor.getColumnIndexOrThrow(MediaStore.Images.Thumbnails._ID);
            int file_ColumnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            int size = cursor.getCount();
            if (size == 0) {
//            imageDetails.setText("No Image");
            }
            else
            {
            int thumbID = 0;
            if (cursor.moveToFirst()) {
            imageID= cursor.getInt(columnIndex);
            thumbID= cursor.getInt(columnIndexThumb);
            Path = cursor.getString(file_ColumnIndex);
            String CapturedImageDetails = " CapturedImageDetails : \n\n"
            +" ImageID :"+imageID+"\n"
            +" ThumbID :"+thumbID+"\n"
            +" Path :"+Path+"\n";
//            imageDetails.setText( CapturedImageDetails );
            }
            }
        } finally {
           if (cursor != null) {
           cursor.close();
           }
           }
        return ""+imageID;
        }

    class LoadImagesFromSDCard  extends AsyncTask<String, Void, Void> {
        private ProgressDialog Dialog = new ProgressDialog(NewProductActivity.this);
        Bitmap mBitmap;
        protected void onPreExecute() {
            Dialog.setMessage(" Loading image from Sdcard..");
            Dialog.show();
        }
        protected Void doInBackground(String... urls) {
            Bitmap bitmap = null;
            Bitmap newBitmap = null;
            Uri uri = null;
            try {

//                uri = Uri.withAppendedPath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, "" + urls[0]);
                File imageFile=new File(urls[0]);
                uri=Uri.parse(urls[0]);
                /**************  Decode an input stream into a bitmap. *********/
//                bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(uri));
                bitmap = BitmapFactory.decodeFile(imageFile.getAbsolutePath());
                if (bitmap != null) {
                    newBitmap = Bitmap.createScaledBitmap(bitmap, 170, 170, true);
                    bitmap.recycle();
                    if (newBitmap != null) {
                        mBitmap = newBitmap;
                    }
                }
            } catch (Exception e) {
                AnalyticsManager.getInstance().raiseException("Product",e);
                Dialog.dismiss();
                cancel(true);
            }
            return null;
        }
        protected void onPostExecute(Void unused) {
            Dialog.dismiss();
            if(mBitmap != null)
            {
                View cell = getLayoutInflater().inflate(R.layout.imagethumb, null);
                final ImageView imageView = (ImageView) cell.findViewById(R.id._image);
                /*imageView.setOnClickListener(new View.OnClickListener() {
                     @Override
                    public void onClick(View v) {
                        Toast.makeText(NewProductActivity.this,
                                (CharSequence) imageView.getTag(), Toast.LENGTH_SHORT).show();
                    }
                });*/
                imageCount++;
                imageView.setTag("Image#"+imageCount);
                TextView text = (TextView) cell.findViewById(R.id._imageName);
                imageView.setImageBitmap(mBitmap);
                text.setText("Image#"+imageCount);
                imageRowLayout.addView(cell);
                if(productId!=null) {
                    uploadImage();
                }
                else
                {
                    isImageUploadPending=true;
                }
            }
        }
    }
}

